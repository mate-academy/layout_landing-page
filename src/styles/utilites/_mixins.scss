@use 'sass:list';

@mixin on-tablet {
  @media (min-width: $tablet-width) and (max-width: $decktop-width) {
    @content;
  }
}

@mixin on-desktop {
  @media (min-width: $decktop-width) {
    @content;
  }
}

@mixin grid {
  --grid-column: 2;

  display: grid;
  grid-template-columns: repeat(var(--grid-column), 1fr);
  gap: $gutter-width;

  @include on-tablet {
    --grid-column: 6;
  }

  @include on-desktop {
    --grid-column: 12;
  }
}

// Допоміжна функція для заміни розширення на @2x
@function retina-file($file) {
  @return str-replace($file, '.', '@2x.');
}

// Міксин з fallback + webp + retina
@mixin bg-responsive($mobile, $tablet: null, $desktop: null) {
  // ===== MOBILE =====
  background: url('../images/#{$mobile}.webp') center/cover no-repeat; // fallback

  background-image: image-set(
    url('../images/#{$mobile}.webp') type('image/webp') 1x,
    url('../images/#{$mobile}@2x.webp') type('image/webp') 2x,
    url('../images/#{$mobile}.jpg') type('image/jpeg') 1x,
    url('../images/#{$mobile}@2x.jpg') type('image/jpeg') 2x
  );

  // ===== TABLET =====
  @if $tablet {
    @include on-tablet {
      background-image: url('../images/#{$tablet}.webp'); // fallback
      background-image: image-set(
        url('../images/#{$tablet}.webp') type('image/webp') 1x,
        url('../images/#{$tablet}@2x.webp') type('image/webp') 2x,
        url('../images/#{$tablet}.jpg') type('image/jpeg') 1x,
        url('../images/#{$tablet}@2x.jpg') type('image/jpeg') 2x
      );
    }
  }

  // ===== DESKTOP =====
  @if $desktop {
    @include on-desktop {
      background-image: url('../images/#{$desktop}.webp'); // fallback
      background-image: image-set(
        url('../images/#{$desktop}.webp') type('image/webp') 1x,
        url('../images/#{$desktop}@2x.webp') type('image/webp') 2x,
        url('../images/#{$desktop}.jpg') type('image/jpeg') 1x,
        url('../images/#{$desktop}@2x.jpg') type('image/jpeg') 2x
      );
    }
  }
}

@mixin transition-custom($properties...) {
  @if list.length($properties) == 1 and list.nth($properties, 1) == all {
    transition: all $transition-duration $transition-function;
  } @else {
    transition: #{list.join($properties, ', ')}
      $transition-duration
      $transition-function;
  }
}

@mixin reset-list-style {
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin underline-block($color) {
  content: '';
  display: block;
  position: absolute;
  left: 0;
  bottom: -8px;
  width: 100%;
  height: 1px;
  background-color: #{$color};
}
