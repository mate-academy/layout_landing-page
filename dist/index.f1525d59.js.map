{"mappings":"ACGA,IAAM,EAAW,SAAS,gBAAgB,CAAC,eAUrC,EAAW,IAAI,qBAAqB,SAAS,CAAO,CAAE,CAAQ,EAClE,EAAQ,OAAO,CAAC,SAAA,CAAhB,EAEM,EAAM,cAAc,CACtB,EAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAG3B,EAAM,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,OAElC,EACF,EAjBgB,CACd,KAAM,KACN,WAAY,MACZ,UAAW,EACb,GAiBA,EAAS,OAAO,CAAC,SAAC,CAAlB,EAAyB,OAAA,EAAS,OAAO,CAAC,EAE1C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// Get the element to animate\nvar elements = document.querySelectorAll(\".my-element\");\n// Define the options for the Intersection Observer\nvar options = {\n    root: null,\n    rootMargin: \"0px\",\n    threshold: 0.1\n};\n// Create a new Intersection Observer\nvar observer = new IntersectionObserver(function(entries, observer) {\n    entries.forEach(function(entry) {\n        // If element is in viewport, add the 'show' class to trigger the animation\n        if (entry.isIntersecting) entry.target.classList.add(\"show\");\n        else entry.target.classList.remove(\"show\");\n    });\n}, options);\n// Start observing the elemen\nelements.forEach(function(el) {\n    return observer.observe(el);\n}); // // Get the element to animate\n // const element1 = document.querySelector('.my-element1');\n // // Define the options for the Intersection Observer\n // const options1 = {\n //   root: null,\n //   rootMargin: '0px',\n //   threshold: 0.1\n // };\n // // Create a new Intersection Observer\n // const observer1 = new IntersectionObserver(function(entries, observer) {\n //   entries.forEach(entry => {\n //     // If element is in viewport, add the 'show' class to trigger the animation\n //     if (entry.isIntersecting) {\n //       element1.classList.add('show');\n //     }\n //     else {\n //       element1.classList.remove('show');\n //     }\n //   });\n // }, options1);\n // // Start observing the elemen\n // observer1.observe(element1);\n\n//# sourceMappingURL=index.f1525d59.js.map\n","'use strict';\n\n// Get the element to animate\nconst elements = document.querySelectorAll('.my-element');\n\n// Define the options for the Intersection Observer\nconst options = {\n  root: null,\n  rootMargin: '0px',\n  threshold: 0.1\n};\n\n// Create a new Intersection Observer\nconst observer = new IntersectionObserver(function(entries, observer) {\n  entries.forEach(entry => {\n    // If element is in viewport, add the 'show' class to trigger the animation\n    if (entry.isIntersecting) {\n      entry.target.classList.add('show');\n    }\n    else {\n      entry.target.classList.remove('show');\n    }\n  });\n}, options);\n\n\n// Start observing the elemen\nelements.forEach((el) => observer.observe(el));\n\n// // Get the element to animate\n// const element1 = document.querySelector('.my-element1');\n\n// // Define the options for the Intersection Observer\n// const options1 = {\n//   root: null,\n//   rootMargin: '0px',\n//   threshold: 0.1\n// };\n\n// // Create a new Intersection Observer\n// const observer1 = new IntersectionObserver(function(entries, observer) {\n//   entries.forEach(entry => {\n//     // If element is in viewport, add the 'show' class to trigger the animation\n//     if (entry.isIntersecting) {\n//       element1.classList.add('show');\n//     }\n//     else {\n//       element1.classList.remove('show');\n//     }\n//   });\n// }, options1);\n\n\n// // Start observing the elemen\n// observer1.observe(element1);\n"],"names":["elements","document","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","remove","root","rootMargin","threshold","el","observe"],"version":3,"file":"index.f1525d59.js.map"}